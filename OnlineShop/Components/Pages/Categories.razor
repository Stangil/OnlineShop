@page "/categories/{Value:int}"
@inject NavigationManager NavManager
@inject ISqlDataAccess sql
@using ShopBackendLibrary.SqlDataAccess
@using Microsoft.AspNetCore.Components.QuickGrid
@using ShopBackendLibrary
@using ShopBackendLibrary.Models
@rendermode InteractiveServer

@if (items is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="items.AsQueryable()" Pagination="pagination">

        @*         <TemplateColumn Title="Edit">
    <button class="btn btn-primary" onclick="@(() => EditProperty(context.PropertyId))">Edit</button>
    </TemplateColumn> *@

        <TemplateColumn Title="View">
            <button class="btn btn-primary" onclick="@(() => ViewItem(context.ItemID))">View</button>
        </TemplateColumn>
        <PropertyColumn Property="i => i.ItemName" Sortable="true" />
        <PropertyColumn Property="i => i.ItemDescription" Sortable="true" />
        <PropertyColumn Property="i => i.ItemPrice" Sortable="true" />
        <PropertyColumn Property="i => i.CategoryID" Sortable="true" />

    </QuickGrid>
    <Paginator State="@pagination" />
}
@code {
    [Parameter]
    public int Value { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 12 };
    private List<Item> items = new();
    private Item item = new();


    protected override async Task OnInitializedAsync()
    {
        item.CategoryID = Value;
        await LoadItems();
    }
    private async Task LoadItems()
    {
        items = await sql.LoadCategoryItems<Item>("dbo.GetItemsInCategory", "Default", item.CategoryID);
    }
    private async Task ViewItem(Guid ItemId)
    {

    }
}