@page "/viewitem/{Value:guid}"
@inject NavigationManager NavManager
@inject ISqlDataAccess sql
@using ShopBackendLibrary.SqlDataAccess
@using Microsoft.AspNetCore.Components.QuickGrid
@using ShopBackendLibrary
@using ShopBackendLibrary.Models
@inject IConfiguration config
@rendermode InteractiveServer

<table class="table">
    <tr>
        <td>
            <label style="width: 90px" for="itemName">Name</label>
            <input id="itemName" style="width: 380px" readonly @bind-value="itemName" />
        </td>
    </tr>
    <tr>
        <td>
            <label style="width: 90px" for="itemDescription">Description</label>
            <input id="itemDescription" readonly style="width: 380px" @bind-value="itemDescription" />
        </td>
    </tr>
    <tr>
        <td>
            <label style="width: 90px" for="price">Price</label>
            <input id="price" readonly style="width: 380px" @bind-value="price" />
        </td>
    </tr>
    @* <tr>
        <td>
            <label style="width: 80px" for="category">Category</label>
            <InputSelect class="select-element" @bind-Value:get="category">
                @if (selected is null)
                {
                    <option selected value="">-Select Category-</option>
                }
                @foreach (Category category in categories)
                {
                    <option value="@category.CategoryID">@category.CategoryName</option>
                }
            </InputSelect>
        </td>
    </tr> *@
</table>
<h3>Pictures</h3>
<div>
    @if (pictures is not null)
    {
        <p>
            @foreach (var picture in pictures)
            {
                <img src="@ShowImage(picture.ImagePath)" style="height: 200px; padding: 10px" />
            }
            
        </p>
    }
</div>

@code {
    [Parameter]
    public Guid Value { get; set; } 
    string? itemName = "", itemDescription = "", imageUrl = "", image = "", path = "";
    private string selected = null!;
    int category;
    private Item item = new();
    decimal? price;
    private List<Category> categories = new();
    private List<Picture>? pictures;
    private Picture pic = new();

    protected override async Task OnInitializedAsync()
    {
        await GetItem();
        await GetCategories();
        imageUrl = config["Path:ImagePath"]!;
        pic.ItemID = Value;
        pic.ImagePath = imageUrl;

        await LoadPictures();
    }

    private async Task GetItem()
    {
        item = await sql.LoadItem("dbo.GetItem", "Default", Value);
        itemName = item.ItemName;
        itemDescription = item.ItemDescription;
        price = item.ItemPrice;
    }

    private async Task GetCategories()
    {
        //categories = await sql.LoadData<Category>("dbo.GetAllCatagories", "Default", null);
    }
    private async Task LoadPictures()
    {
        pictures = await sql.LoadData<Picture>(
            "dbo.spGetPictures", "Default", pic
        );
    }
    private string ShowImage(string id)
    {
        return $"{imageUrl}{id}";
    }

    // private async Task SaveItem()
    // {

    //     // var authState = await authenticationStateTask;
    //     // createdBy = authState.User.Claims.FirstOrDefault().Value;
    //     Guid itemID = Guid.NewGuid();

    //     Console.WriteLine("Create Item");
    //     item.CategoryID = category;
    //     item.ItemName = itemName;
    //     item.ItemDescription = itemDescription;
    //     item.ItemPrice = price;
    //     item.ItemID = itemID;
    //     await sql.SaveData("dbo.spCreateItem", "Default", item);
    //     NavManager.NavigateTo($"/Inventory");
    // }
    private void Exit()
    {
        NavManager.NavigateTo($"/Inventory");
    }
}
