@page "/newitem/"
@inject NavigationManager NavManager
@inject ISqlDataAccess sql
@inject IConfiguration config
@using ShopBackendLibrary.SqlDataAccess
@using Microsoft.AspNetCore.Components.QuickGrid
@using ShopBackendLibrary
@using ShopBackendLibrary.Models
@rendermode InteractiveServer

<table class="table">
    <tr>
        <td>
            <label style="width: 90px" for="itemName">Name</label>
            <input id="itemName" style="width: 380px" @bind-value="itemName" />
        </td>
    </tr>
    <tr>
        <td>
            <label style="width: 90px" for="itemDescription">Description</label>
            <input id="itemDescription" style="width: 380px" @bind-value="itemDescription" />
        </td>
    </tr>
    <tr>
        <td>
            <label style="width: 90px" for="price">Price</label>
            <input id="price" style="width: 380px" @bind-value="price" />
        </td>
    </tr>
    <tr>
        <td>
            <label style="width: 90px" for="category">Category</label>
            <InputSelect class="select-element" @bind-Value:get="category">
                @if (selected is null)
                {
                    <option selected value="">-Select Category-</option>
                }
                @foreach (Category category in categories)
                {
                    <option value="@category.CategoryID">@category.CategoryName</option>
                }
            </InputSelect>
        </td>
    </tr>
</table>  


    <div>
        <button class="btn btn-primary" @onclick="SaveItem">Add</button> <button class="btn btn-primary" @onclick="Exit">Cancel</button>
    </div>



@code {
    string itemName = "", itemDescription = "";
    private string selected = null!;
    int category;
    private long maxFileSize = 1024 * 1024 * 5;//5 Mb
    private Item item = new();
    decimal price;
    private List<Category> categories = new();
    private List<Picture> pictures = new();
    private List<string> errors = new();
    private int maxAllowedFiles = 5;//TODO put in appsettings?
    private string relativePath = "";
    protected override async Task OnInitializedAsync()
    {
        GetCategories();
    }
    private async void GetCategories()
    {
        categories = await sql.LoadData<Category>("dbo.GetAllCategories", "Default", null);
    }
    // protected void SetSelectedCategory(string value)
    // {
    //     foreach(var category in categories)
    //     {
    //         item.CategoryID = category.CategoryID;
    //     }
    // }

    private async Task SaveItem()
    {

        // var authState = await authenticationStateTask;
        // createdBy = authState.User.Claims.FirstOrDefault().Value;
        Guid itemID = Guid.NewGuid();

        Console.WriteLine("Create Item");
        item.CategoryID = category;
        item.ItemName = itemName;
        item.ItemDescription = itemDescription;
        item.ItemPrice = price;
        item.ItemID = itemID;
        await sql.SaveData("dbo.spCreateItem", "Default", item);
        NavManager.NavigateTo($"/AddPictures/{itemID}");
    }

   
    private void Exit()
    {
        NavManager.NavigateTo($"/Inventory");
    }
}
